
#line 1 "SemVersionParser.Ragel.rl"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 0162

// uncomment for state machine action tracing
// #define TRACE_FSM

namespace NSemVersion
{
	using System;
	using System.Text;
	using System.Collections.Generic;

	public sealed partial class SemVersionParser
	{    
		
#line 190 "SemVersionParser.Ragel.rl"

		
		
#line 30 "SemVersionParser.Ragel.cs"
static readonly sbyte[] _semver_eof_actions =  new sbyte [] {
	0, 1, 1, 4, 4, 6, 7, 7, 
	10, 10, 4, 1, 16, 16, 7, 7, 
	21, 23, 25, 25, 21, 25, 25, 23
};

const int semver_start = 1;
const int semver_first_final = 16;
const int semver_error = 0;

const int semver_en_main = 1;
const int semver_en_prerelease = 12;
const int semver_en_buildmetadata = 14;


#line 193 "SemVersionParser.Ragel.rl"

		#if (!TRACE_FSM)
			[System.Diagnostics.DebuggerStepThrough]
		#endif
		private ParsedFragments RagelParseCore(int cs, string input)
		{
			// ragel support
			char[] data = input.ToCharArray();
			int p = 0;
			int pe = data.Length;
			int eof = data.Length;
			
			// helper parsing buffers, ...
			int val=0;
			bool hasAlpha = false;
			var sb = new StringBuilder();

			// parsing context
			int major = 0, minor = 0, patch = 0;
			List<PreReleasePart.Fragment> preRelease = null;
			List<string> buildMetadata = null;

			
#line 70 "SemVersionParser.Ragel.cs"
	{
	}

#line 216 "SemVersionParser.Ragel.rl"
			
#line 76 "SemVersionParser.Ragel.cs"
	{
	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	switch ( cs ) {
case 1:
	if ( data[p] == 48u )
		goto tr1;
	if ( 49u <= data[p] && data[p] <= 57u )
		goto tr2;
	goto tr0;
case 0:
	goto _out;
case 2:
	if ( data[p] == 46u )
		goto tr3;
	goto tr0;
case 3:
	if ( data[p] == 48u )
		goto tr5;
	if ( 49u <= data[p] && data[p] <= 57u )
		goto tr6;
	goto tr4;
case 4:
	if ( data[p] == 46u )
		goto tr7;
	goto tr4;
case 5:
	if ( data[p] == 48u )
		goto tr9;
	if ( 49u <= data[p] && data[p] <= 57u )
		goto tr10;
	goto tr8;
case 16:
	switch( data[p] ) {
		case '\u002b': goto tr31;
		case '\u002d': goto tr32;
		default: break;
	}
	goto tr30;
case 6:
	if ( data[p] == 45u )
		goto tr12;
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr12;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr12;
	} else
		goto tr12;
	goto tr11;
case 17:
	switch( data[p] ) {
		case '\u002d': goto tr13;
		case '\u002e': goto tr33;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr13;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr13;
	} else
		goto tr13;
	goto tr11;
case 7:
	if ( data[p] == 45u )
		goto tr13;
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr13;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr13;
	} else
		goto tr13;
	goto tr11;
case 8:
	switch( data[p] ) {
		case '\u002d': goto tr15;
		case '\u0030': goto tr16;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 49u <= data[p] && data[p] <= 57u )
			goto tr17;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr15;
	} else
		goto tr15;
	goto tr14;
case 18:
	switch( data[p] ) {
		case '\u002b': goto tr35;
		case '\u002d': goto tr18;
		case '\u002e': goto tr36;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr19;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr18;
	} else
		goto tr18;
	goto tr34;
case 9:
	switch( data[p] ) {
		case '\u002d': goto tr18;
		case '\u0030': goto tr19;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 49u <= data[p] && data[p] <= 57u )
			goto tr20;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr18;
	} else
		goto tr18;
	goto tr14;
case 19:
	switch( data[p] ) {
		case '\u002b': goto tr35;
		case '\u002d': goto tr18;
		case '\u002e': goto tr36;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr20;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr18;
	} else
		goto tr18;
	goto tr34;
case 20:
	switch( data[p] ) {
		case '\u002b': goto tr31;
		case '\u002d': goto tr32;
		default: break;
	}
	if ( 48u <= data[p] && data[p] <= 57u )
		goto tr10;
	goto tr30;
case 10:
	if ( data[p] == 46u )
		goto tr7;
	if ( 48u <= data[p] && data[p] <= 57u )
		goto tr6;
	goto tr4;
case 11:
	if ( data[p] == 46u )
		goto tr3;
	if ( 48u <= data[p] && data[p] <= 57u )
		goto tr2;
	goto tr0;
case 12:
	switch( data[p] ) {
		case '\u002d': goto tr22;
		case '\u0030': goto tr23;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 49u <= data[p] && data[p] <= 57u )
			goto tr24;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr22;
	} else
		goto tr22;
	goto tr21;
case 21:
	switch( data[p] ) {
		case '\u002d': goto tr25;
		case '\u002e': goto tr37;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr26;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr25;
	} else
		goto tr25;
	goto tr21;
case 13:
	switch( data[p] ) {
		case '\u002d': goto tr25;
		case '\u0030': goto tr26;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 49u <= data[p] && data[p] <= 57u )
			goto tr27;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr25;
	} else
		goto tr25;
	goto tr21;
case 22:
	switch( data[p] ) {
		case '\u002d': goto tr25;
		case '\u002e': goto tr37;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr27;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr25;
	} else
		goto tr25;
	goto tr21;
case 14:
	if ( data[p] == 45u )
		goto tr28;
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr28;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr28;
	} else
		goto tr28;
	goto tr11;
case 23:
	switch( data[p] ) {
		case '\u002d': goto tr29;
		case '\u002e': goto tr38;
		default: break;
	}
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr29;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr29;
	} else
		goto tr29;
	goto tr11;
case 15:
	if ( data[p] == 45u )
		goto tr29;
	if ( data[p] < 65u ) {
		if ( 48u <= data[p] && data[p] <= 57u )
			goto tr29;
	} else if ( data[p] > 90u ) {
		if ( 97u <= data[p] && data[p] <= 122u )
			goto tr29;
	} else
		goto tr29;
	goto tr11;
		default: break;
	}

	tr0: cs = 0; goto f0;
	tr4: cs = 0; goto f3;
	tr8: cs = 0; goto f5;
	tr11: cs = 0; goto f6;
	tr14: cs = 0; goto f9;
	tr21: cs = 0; goto f15;
	tr30: cs = 0; goto f21;
	tr34: cs = 0; goto f25;
	tr1: cs = 2; goto _again;
	tr3: cs = 3; goto f2;
	tr5: cs = 4; goto _again;
	tr7: cs = 5; goto f4;
	tr31: cs = 6; goto f20;
	tr35: cs = 6; goto f24;
	tr33: cs = 7; goto f23;
	tr32: cs = 8; goto f20;
	tr36: cs = 9; goto f26;
	tr6: cs = 10; goto f1;
	tr2: cs = 11; goto f1;
	tr37: cs = 13; goto f26;
	tr38: cs = 15; goto f23;
	tr9: cs = 16; goto _again;
	tr12: cs = 17; goto f7;
	tr13: cs = 17; goto f8;
	tr19: cs = 18; goto f8;
	tr15: cs = 18; goto f10;
	tr16: cs = 18; goto f11;
	tr18: cs = 18; goto f13;
	tr17: cs = 19; goto f12;
	tr20: cs = 19; goto f14;
	tr10: cs = 20; goto f1;
	tr26: cs = 21; goto f8;
	tr25: cs = 21; goto f13;
	tr22: cs = 21; goto f16;
	tr23: cs = 21; goto f17;
	tr27: cs = 22; goto f14;
	tr24: cs = 22; goto f18;
	tr29: cs = 23; goto f8;
	tr28: cs = 23; goto f19;

f1:
#line 26 "SemVersionParser.Ragel.rl"
	{ 
			val = val * 10 + (int)Char.GetNumericValue(data[p]);			
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("add_digit {0} (val={1})", data[p], val));
			#endif
		}
	goto _again;
f8:
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f20:
#line 71 "SemVersionParser.Ragel.rl"
	{ 
			patch = val;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_patch {0}", patch));
			#endif
		}
	goto _again;
f0:
#line 146 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "major version");
		}
	goto _again;
f3:
#line 150 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "minor version");
		}
	goto _again;
f5:
#line 154 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "patch version part");
		}
	goto _again;
f9:
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
	goto _again;
f14:
#line 26 "SemVersionParser.Ragel.rl"
	{ 
			val = val * 10 + (int)Char.GetNumericValue(data[p]);			
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("add_digit {0} (val={1})", data[p], val));
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f2:
#line 55 "SemVersionParser.Ragel.rl"
	{ 
			major = val;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_major {0}", major));
			#endif
		}
#line 33 "SemVersionParser.Ragel.rl"
	{ 
			val = 0;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearval");
			#endif
		}
	goto _again;
f4:
#line 63 "SemVersionParser.Ragel.rl"
	{ 
			minor = val;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_minor {0}", minor));
			#endif
		}
#line 33 "SemVersionParser.Ragel.rl"
	{ 
			val = 0;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearval");
			#endif
		}
	goto _again;
f13:
#line 87 "SemVersionParser.Ragel.rl"
	{			
			hasAlpha = true;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("markalpha");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f24:
#line 95 "SemVersionParser.Ragel.rl"
	{
			if (hasAlpha)
				preRelease.Add(new PreReleasePart.Fragment(sb.ToString()));
			else
			{
				if (!PreReleasePart.Fragment.IsNumericFormatValid(sb.ToString(), val))
					throw new SemVersionParseException(String.Format("PreRelease part contains leading zeroes '{0}'", sb.ToString()));

				preRelease.Add(new PreReleasePart.Fragment(val));
			}

			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_prerelease_fragment text={0}, val={1}, isNumeric={2}", sb.ToString(), val, !hasAlpha));
			#endif
		}
#line 120 "SemVersionParser.Ragel.rl"
	{
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_prerelease preRelease:{0}", preRelease.ToString()));
			#endif
		}
	goto _again;
f17:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f23:
#line 126 "SemVersionParser.Ragel.rl"
	{			
			buildMetadata.Add(sb.ToString());
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_buildmetadata_fragment text={0}", sb.ToString()));
			#endif
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
	goto _again;
f19:
#line 133 "SemVersionParser.Ragel.rl"
	{
			buildMetadata = new List<string>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_buildmetadata");
			#endif					
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f15:
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	goto _again;
f6:
#line 162 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "buildMetadata");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	goto _again;
f18:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 26 "SemVersionParser.Ragel.rl"
	{ 
			val = val * 10 + (int)Char.GetNumericValue(data[p]);			
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("add_digit {0} (val={1})", data[p], val));
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f11:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f16:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 87 "SemVersionParser.Ragel.rl"
	{			
			hasAlpha = true;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("markalpha");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f7:
#line 133 "SemVersionParser.Ragel.rl"
	{
			buildMetadata = new List<string>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_buildmetadata");
			#endif					
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f25:
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
#line 162 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "buildMetadata");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	goto _again;
f26:
#line 95 "SemVersionParser.Ragel.rl"
	{
			if (hasAlpha)
				preRelease.Add(new PreReleasePart.Fragment(sb.ToString()));
			else
			{
				if (!PreReleasePart.Fragment.IsNumericFormatValid(sb.ToString(), val))
					throw new SemVersionParseException(String.Format("PreRelease part contains leading zeroes '{0}'", sb.ToString()));

				preRelease.Add(new PreReleasePart.Fragment(val));
			}

			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_prerelease_fragment text={0}, val={1}, isNumeric={2}", sb.ToString(), val, !hasAlpha));
			#endif
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
#line 33 "SemVersionParser.Ragel.rl"
	{ 
			val = 0;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearval");
			#endif
		}
#line 79 "SemVersionParser.Ragel.rl"
	{			
			hasAlpha = false;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearmarkalpha");
			#endif
		}
	goto _again;
f12:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
#line 26 "SemVersionParser.Ragel.rl"
	{ 
			val = val * 10 + (int)Char.GetNumericValue(data[p]);			
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("add_digit {0} (val={1})", data[p], val));
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f10:
#line 112 "SemVersionParser.Ragel.rl"
	{			
			preRelease = new List<PreReleasePart.Fragment>();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("start_prerelease");
			#endif
		}
#line 47 "SemVersionParser.Ragel.rl"
	{		
			sb.Clear();
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("clearbuf");
			#endif
		}
#line 87 "SemVersionParser.Ragel.rl"
	{			
			hasAlpha = true;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("markalpha");
			#endif
		}
#line 40 "SemVersionParser.Ragel.rl"
	{			
			sb.Append(data[p]);
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("buf {0} (buf={1})", data[p], sb.ToString()));
			#endif
		}
	goto _again;
f21:
#line 154 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "patch version part");
		}
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
#line 162 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "buildMetadata");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	goto _again;

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	switch ( _semver_eof_actions[cs] ) {
	case 21:
#line 71 "SemVersionParser.Ragel.rl"
	{ 
			patch = val;
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_patch {0}", patch));
			#endif
		}
	break;
	case 1:
#line 146 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "major version");
		}
	break;
	case 4:
#line 150 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "minor version");
		}
	break;
	case 6:
#line 154 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "patch version part");
		}
	break;
	case 10:
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
	break;
	case 25:
#line 95 "SemVersionParser.Ragel.rl"
	{
			if (hasAlpha)
				preRelease.Add(new PreReleasePart.Fragment(sb.ToString()));
			else
			{
				if (!PreReleasePart.Fragment.IsNumericFormatValid(sb.ToString(), val))
					throw new SemVersionParseException(String.Format("PreRelease part contains leading zeroes '{0}'", sb.ToString()));

				preRelease.Add(new PreReleasePart.Fragment(val));
			}

			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_prerelease_fragment text={0}, val={1}, isNumeric={2}", sb.ToString(), val, !hasAlpha));
			#endif
		}
#line 120 "SemVersionParser.Ragel.rl"
	{
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_prerelease preRelease:{0}", preRelease.ToString()));
			#endif
		}
	break;
	case 23:
#line 126 "SemVersionParser.Ragel.rl"
	{			
			buildMetadata.Add(sb.ToString());
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine(String.Format("on_buildmetadata_fragment text={0}", sb.ToString()));
			#endif
		}
#line 140 "SemVersionParser.Ragel.rl"
	{
			#if (TRACE_FSM)
				System.Diagnostics.Trace.WriteLine("on_buildmetadata");
			#endif
		}
	break;
	case 16:
#line 158 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "preRelease");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	break;
	case 7:
#line 162 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof, "buildMetadata");
		}
#line 166 "SemVersionParser.Ragel.rl"
	{
			throw CreateParsingException(input, p, p == eof);
		}
	break;
#line 915 "SemVersionParser.Ragel.cs"
		default: break;
	}
	}

	_out: {}
	}

#line 217 "SemVersionParser.Ragel.rl"

			return new ParsedFragments
			{
				Major = major,
				Minor = minor,
				Patch = patch,
				PreRelease = preRelease,
				BuildMetadata = buildMetadata
			};
		}
	}
}